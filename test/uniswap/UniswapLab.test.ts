import hardhat from 'hardhat'
import { deploy } from '../../lib/deploy-utils'
import {
  TMARS__factory,
  MockPriceFeeder__factory,
  MultiSignAdmin__factory,
  ReceiverAdmin__factory,
  Referral__factory,
  TestFairMint__factory,
  UniswapUtil__factory
} from '../../typechain-types'
import { mine, setBalance } from '@nomicfoundation/hardhat-network-helpers'
import { ZeroAddress } from 'ethers'
import { sqrt } from '../../lib/bigint-math'
import { INonfungiblePositionManager, INonfungiblePositionManager__factory, UniswapUtil } from '../../typechain-types'

const mi = INonfungiblePositionManager__factory.createInterface()
//pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN
const token0 = '0x4200000000000000000000000000000000000006' //WETH
const token1 = '0x4ed4E862860beD51a9570b96d89aF5E1B0Efefed' //Degen
const fee = 3000n
const uniswap: INonfungiblePositionManager = {} as any
const e18 = 10n ** 18n

const feeTickSpacing = {
  100: 1,
  500: 10,
  3000: 60,
  10000: 200
}

// tickLower = TICK_MIN / tickSpacing * tickSpacing + tickSpacing
// tickUpper = TICK_MAX / tickSpacing * tickSpacing - tickSpacing

// rawSqrtPriceX96 = sqrt(token1Amount * 2n**192n / token0Amount);
// const curTick=TickMath.getTickAtSqrtRatio(rawSqrtPriceX96);
// const sqrtPriceX96 = getSqrtRatioAtTick(curTick);

// liquidity = LiquidityAmounts.getLiquidityForAmounts(sqrtPriceX96, lowerSqrtPriceX96, upperSqrtPriceX96, amount0, amount1 )

// const [amount0Desired, amount1Desired] =  LiquidityAmounts.getAmountsForLiquidity(sqrtPriceX96, lowerSqrtPriceX96, upperSqrtPriceX96, liquidity)

//liq1 = amount1 * q96 /(pb-pa)  = amount1 /(sqrt(upper) - sqrt(lower))
//liq0 = (amount0 * pa * pb) /( (pb - pa) * q96) =  amount0 * sqrt(lower) * sqrt(upper) / (sqrt(upper)-sqrt(lower))

// const token1Amount = (sqrtPriceX96 * sqrtPriceX96 * token0Amount) / 2n ** 192n
// const token0Amount = token1Amount * 2n**192n / sqrtPriceX96 / sqrtPriceX96;

describe('UniswapLab.sol', () => {
  console.log({
    token0,
    token1,
    fee,
    e18,
    uniswap
  })

  test('UniswapUtil.sol', async () => {
    const signers = await hardhat.ethers.getSigners()
    const provider = signers[0].provider
    const ss = signers.map((a) => a.address)
    const e18 = 10n ** 18n
    const e9 = 10n ** 9n
    console.log(ss)
    const orig = {
      fee,
      tickLower: -887220n,
      tickUpper: 887220n,
      amount0Desired: 2000000000000000000n,
      amount1Desired: 5544432194933054718118229834n,
      amount0Min: 1995018672215265792n,
      amount1Min: 5530553744643398727443042651n,
      sqrtPriceX96: 4171508417380214375983302657958483n
    }
  })


  test('createPoolAndMint', () => {
    //createPoolAndMint  https://basescan.org/tx/0xca09cd4ac1f29af786849958dc97fae051c004f4fce19e8b71b41e4aa2b47446
    //pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN tokenId=29008
    const multicallData =
      '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000008413ead56200000000000000000000000042000000000000000000000000000000000000060000000000000000000000004ed4e862860bed51a9570b96d89af5e1b0efefed0000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000cdabd6a7f56bd7290e47207fe2530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001648831645600000000000000000000000042000000000000000000000000000000000000060000000000000000000000004ed4e862860bed51a9570b96d89af5e1b0efefed0000000000000000000000000000000000000000000000000000000000000bb8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2764c00000000000000000000000000000000000000000000000000000000000d89b40000000000000000000000000000000000000000000000001bc16d674ec80000000000000000000000000000000000000000000011ea3f2f8c188c85c538774a0000000000000000000000000000000000000000000000001bafbae98da99200000000000000000000000000000000000000000011dec44f3fdfef70126e515b0000000000000000000000003c12b77ae8b7dd1feb63d1d6a2a819acda0a41d200000000000000000000000000000000000000000000000000000000659afcf500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
    const name = mi.getFunctionName(multicallData.slice(0, 10))
    const args = mi.decodeFunctionData(name, multicallData)
    const calls = args[0].map((v: string) => [
      mi.getFunctionName(v.slice(0, 10)),
      mi.decodeFunctionData(v.slice(0, 10), v).map((v) => v)
    ])
    console.log(name, calls)

    const sqrtPriceX96 = 4171508417380214375983302657958483n
    const msgSender = '0x3c12b77ae8b7dd1feb63d1d6a2a819acda0a41d2'
    //uniswap.createAndInitializePoolIfNecessary(token0, token1, fee, sqrtPriceX96)
    const call0 = mi.encodeFunctionData('createAndInitializePoolIfNecessary', [token0, token1, fee, sqrtPriceX96])

    const mintParams: INonfungiblePositionManager.MintParamsStruct = {
      token0,
      token1,
      fee,
      tickLower: -887220n,
      tickUpper: 887220n,
      amount0Desired: 2000000000000000000n,
      amount1Desired: 5544432194933054718118229834n,
      amount0Min: 1995018672215265792n,
      amount1Min: 5530553744643398727443042651n,
      recipient: msgSender,
      deadline: 1704656117n
    }
    //uniswap.mint(mintParams)
    const call1 = mi.encodeFunctionData('mint', [mintParams])

    //uniswap.refundETH()
    const call2 = mi.encodeFunctionData('refundETH')

    //uniswap.multicall([call0, call1, call2], { value: 2n * e18 })
    const data = mi.encodeFunctionData('multicall', [[call0, call1, call2]])
    expect(data).toBe(multicallData)
  })

  test('mint', () => {
    //mint  https://basescan.org/tx/0xb701b8f09d0e8ca4c9ad38a7713e593f29b047b29ae9cdcc292a1fb4946f408a
    //pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN tokenId=72792
    const multicallData =
      '0xac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001648831645600000000000000000000000042000000000000000000000000000000000000060000000000000000000000004ed4e862860bed51a9570b96d89af5e1b0efefed0000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020ea40000000000000000000000000000000000000000000000000005d89aede252c200000000000000000000000000000000000000000001f5ddf51ac1d6b6a55565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f49bfab4e0708e45e686000000000000000000000000641844cad17bd8e707475a884dbf9405e0f273360000000000000000000000000000000000000000000000000000000065f5bc0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'

    const name = mi.getFunctionName(multicallData.slice(0, 10))
    const args = mi.decodeFunctionData(name, multicallData)
    const calls = args[0].map((v: string) => [
      mi.getFunctionName(v.slice(0, 10)),
      mi.decodeFunctionData(v.slice(0, 10), v).map((v) => v)
    ])
    console.log(name, calls)

    const msgSender = '0x641844CaD17bD8E707475A884DbF9405e0f27336'
    const mintParams: INonfungiblePositionManager.MintParamsStruct = {
      token0,
      token1,
      fee,
      tickLower: 0n,
      tickUpper: 134820n,
      amount0Desired: 1645534811148994n,
      amount1Desired: 2369999999999998681240933n,
      amount0Min: 0n,
      amount1Min: 2364060552077026905155206n,
      recipient: msgSender,
      deadline: 1710603267n
    }
    //uniswap.mint(mintParams)
    const call0 = mi.encodeFunctionData('mint', [mintParams])

    //uniswap.refundETH()
    const call1 = mi.encodeFunctionData('refundETH')

    //uniswap.multicall([call0, call1, call2], { value: 1645534811148994n })
    const data = mi.encodeFunctionData('multicall', [[call0, call1]])

    expect(data).toBe(multicallData)
  })

  test('increaseLiquidity', () => {
    //increaseLiquidity  https://basescan.org/tx/0xf748820e470eb2caee4573dbcf9113fdc4c6bcced0a02d07f9f90fb98cfc2b6d
    //pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN tokenId=72811n
    const multicallData =
      '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c4219f5d170000000000000000000000000000000000000000000000000000000000011c6b00000000000000000000000000000000000000000000000000f56b5ccf7b5da70000000000000000000000000000000000000000000020a963884501a2e1c8c600000000000000000000000000000000000000000000000000f169a4248bf44400000000000000000000000000000000000000000000207d2ed7369354c630570000000000000000000000000000000000000000000000000000000065f5c4b900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
    const name = mi.getFunctionName(multicallData.slice(0, 10))
    const args = mi.decodeFunctionData(name, multicallData)
    const calls = args[0].map((v: string) => [
      mi.getFunctionName(v.slice(0, 10)),
      mi.decodeFunctionData(v.slice(0, 10), v).map((v) => v)
    ])
    console.log(name, calls)

    const tokenId = 72811n
    const increaseLiquidityParams: INonfungiblePositionManager.IncreaseLiquidityParamsStruct = {
      tokenId,
      amount0Desired: 69079415656242599n,
      amount1Desired: 154240399258565478566086n,
      amount0Min: 67951623095972932n,
      amount1Min: 153424945687494488633431n,
      deadline: 1710605497n
    }
    //uniswap.increaseLiquidity(increaseLiquidityParams)
    const call0 = mi.encodeFunctionData('increaseLiquidity', [increaseLiquidityParams])

    //uniswap.refundETH()
    const call1 = mi.encodeFunctionData('refundETH')

    //uniswap.multicall([call0, call1, call2], { value: 1645534811148994n })
    const data = mi.encodeFunctionData('multicall', [[call0, call1]])

    expect(data).toBe(multicallData)
  })

  test('decreaseLiquidity', () => {
    //decreaseLiquidity  https://basescan.org/tx/0x2cb986a38899db39e73ddac67ad648ee3850e7f294439c95d4ddd8af7e03c871
    //pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN tokenId=72744n
    {
      console.log('--decreaseLiquidity1--')
      const multicallData =
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000a40c49ccbe0000000000000000000000000000000000000000000000000000000000011c2800000000000000000000000000000000000000000000032713b1b76b4237f9c70000000000000000000000000000000000000000000000001b7a73453e48f67a0000000000000000000000000000000000000000000b5310b1c6b9e29134d8c70000000000000000000000000000000000000000000000000000000065f61d53000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084fc6f78650000000000000000000000000000000000000000000000000000000000011c28000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c0000000000000000000000000000000000000000000000001bd17160f7f2a6e300000000000000000000000076397a7c2774bbba9fad781739da5a18db63d8ca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb0000000000000000000000004ed4e862860bed51a9570b96d89af5e1b0efefed0000000000000000000000000000000000000000000b5751f770d4e78ce0de2600000000000000000000000076397a7c2774bbba9fad781739da5a18db63d8ca00000000000000000000000000000000000000000000000000000000'
      const name = mi.getFunctionName(multicallData.slice(0, 10))
      const args = mi.decodeFunctionData(name, multicallData)
      const calls = args[0].map((v: string) => [
        mi.getFunctionName(v.slice(0, 10)),
        mi.decodeFunctionData(v.slice(0, 10), v).map((v) => v)
      ])
      const msgSender = '0x76397A7c2774BBba9fAD781739Da5a18Db63D8Ca'
      console.log(name, calls)

      const tokenId = 72744n
      const decreaseLiquidityParams: INonfungiblePositionManager.DecreaseLiquidityParamsStruct = {
        tokenId,
        liquidity: 14887941584512506919367n,
        amount0Min: 1980021727417661050n,
        amount1Min: 13690448391874853679192263n,
        deadline: 1710628179n
      }
      //uniswap.decreaseLiquidity(decreaseLiquidityParams)
      const call0 = mi.encodeFunctionData('decreaseLiquidity', [decreaseLiquidityParams])

      const collectParams: INonfungiblePositionManager.CollectParamsStruct = {
        tokenId,
        recipient: '0x0000000000000000000000000000000000000000',
        amount0Max: 340282366920938463463374607431768211455n,
        amount1Max: 340282366920938463463374607431768211455n
      }
      //uniswap.collect(collectParams)
      const call1 = mi.encodeFunctionData('collect', [collectParams])

      //uniswap.unwrapWETH9(2004507970447255267n, msgSender);
      const call2 = mi.encodeFunctionData('unwrapWETH9', [2004507970447255267n, msgSender])

      //uniswap.sweepToken(token1, 13710541916025566254915110n, msgSender)
      const call3 = mi.encodeFunctionData('sweepToken', [token1, 13710541916025566254915110n, msgSender])

      //uniswap.multicall([call0, call1, call2, call3])
      const data = mi.encodeFunctionData('multicall', [[call0, call1, call2, call3]])

      expect(data).toBe(multicallData)
    }

    //decreaseLiquidity  https://basescan.org/tx/0xd066abaef9bc37a10cb7aba48281fba4dd56ef3f1bc0c9b268f1e3c8d422e6e0
    //pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN tokenId=71735n
    {
      console.log('--decreaseLiquidity2--')
      const multicallData =
        '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000084fc6f78650000000000000000000000000000000000000000000000000000000000011837000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000009799041529de0000000000000000000000006e45310b69908a7490ebdbb66601462c8da6e46a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb0000000000000000000000004ed4e862860bed51a9570b96d89af5e1b0efefed00000000000000000000000000000000000000000000000744ba3ffe618954190000000000000000000000006e45310b69908a7490ebdbb66601462c8da6e46a00000000000000000000000000000000000000000000000000000000'
      const name = mi.getFunctionName(multicallData.slice(0, 10))
      const args = mi.decodeFunctionData(name, multicallData)
      const calls = args[0].map((v: string) => [
        mi.getFunctionName(v.slice(0, 10)),
        mi.decodeFunctionData(v.slice(0, 10), v).map((v) => v)
      ])
      const msgSender = '0x6e45310b69908a7490ebdbb66601462c8da6e46a'
      console.log(name, calls)

      const tokenId = 71735n
      const collectParams: INonfungiblePositionManager.CollectParamsStruct = {
        tokenId,
        recipient: '0x0000000000000000000000000000000000000000',
        amount0Max: 340282366920938463463374607431768211455n,
        amount1Max: 340282366920938463463374607431768211455n
      }
      //uniswap.collect(collectParams)
      const call1 = mi.encodeFunctionData('collect', [collectParams])

      //uniswap.unwrapWETH9(166683454286302n, msgSender);
      const call2 = mi.encodeFunctionData('unwrapWETH9', [166683454286302n, msgSender])

      //uniswap.sweepToken(token1, 134079549618004775961n, msgSender)
      const call3 = mi.encodeFunctionData('sweepToken', [token1, 134079549618004775961n, msgSender])

      //uniswap.multicall([call1, call2, call3])
      const data = mi.encodeFunctionData('multicall', [[call1, call2, call3]])

      expect(data).toBe(multicallData)
    }

    //decreaseLiquidity  https://basescan.org/tx/0xedcba8d0f2c1688f6270bb5646c80f1db1ac4166428c0fee773f533a859a1a5c
    //pool=0xc9034c3e7f58003e6ae0c8438e7c8f4598d5acaa WETH/DEGEN tokenId=57079n
    {
      console.log('--decreaseLiquidity3--')
      const multicallData =
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000a40c49ccbe000000000000000000000000000000000000000000000000000000000000def7000000000000000000000000000000000000000000000000650f7505c97c78f1000000000000000000000000000000000000000000000000001d8897144b779e000000000000000000000000000000000000000000000158178ffa1dfe1570600000000000000000000000000000000000000000000000000000000065f6954b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084fc6f7865000000000000000000000000000000000000000000000000000000000000def7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c000000000000000000000000000000000000000000000000001e3b40012cc78c000000000000000000000000e5b784f12040df375d734636082888f19ee8f42b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb0000000000000000000000004ed4e862860bed51a9570b96d89af5e1b0efefed000000000000000000000000000000000000000000000165547fb9c51b3b28ce000000000000000000000000e5b784f12040df375d734636082888f19ee8f42b00000000000000000000000000000000000000000000000000000000'
      const name = mi.getFunctionName(multicallData.slice(0, 10))
      const args = mi.decodeFunctionData(name, multicallData)
      const calls = args[0].map((v: string) => [
        mi.getFunctionName(v.slice(0, 10)),
        mi.decodeFunctionData(v.slice(0, 10), v).map((v) => v)
      ])
      const msgSender = '0xe5b784f12040df375d734636082888f19ee8f42b'
      console.log(name, calls)
      console.log(calls[0][0], calls[0][1][0])
      console.log(calls[1][0], calls[1][1][0])

      //decreaseLiquidity
      //collect
      //unwrapWETH9
      //sweepToken
    }
  })
})
